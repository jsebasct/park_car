type: edu
custom_name: stage5
files:
- name: src/parking/Main.kt
  visible: true
  text: "package parking\n\nimport java.util.*\n\ndata class Car (val registrationNumber:\
    \ String, var color: String) {\n    override fun toString(): String {\n      \
    \  return \"$registrationNumber $color\"\n    }\n}\n\ndata class ParkLot (var\
    \ car: Car?, var taken: Boolean = false) {\n    override fun toString(): String\
    \ {\n        return if (taken) car.toString() else \"\"\n    }\n}\n\nclass ParkingLot(size:\
    \ Int) {\n\n    private var parkingLots: List<ParkLot> = List(size) { ParkLot(null)\
    \ }\n\n    /**\n     * @return the HUMAN index at which was inserted the new car\n\
    \     */\n    fun park(registrationNumber: String, color: String): String {\n\
    \        if (registrationNumber.contains(\"\\\\s+\")) {\n            throw IllegalArgumentException(\"\
    register number must not contain spaces\")\n        }\n\n        val indexFreeParkLot\
    \ = parkingLots.indexOfFirst { !it.taken }\n        if (indexFreeParkLot == -1)\
    \ {\n            return \"Sorry, the parking lot is full.\"\n\n        } else\
    \ {\n            parkingLots[indexFreeParkLot].car = Car(registrationNumber, color)\n\
    \            parkingLots[indexFreeParkLot].taken = true\n        }\n\n       \
    \ val spot = indexFreeParkLot+1\n        return \"$color car parked in spot ${spot}.\"\
    \n    }\n\n    fun leave(humanIndex: Int): String {\n        val parkIndex = humanIndex\
    \ - 1\n\n        return if (parkingLots[parkIndex].taken) {\n            parkingLots[parkIndex].car\
    \ = null\n            parkingLots[parkIndex].taken = false\n            \"Spot\
    \ $humanIndex is free.\"\n        } else {\n            \"There is no car in spot\
    \ $humanIndex.\"\n        }\n    }\n\n    fun getStatus(): String {\n        return\
    \ if (parkingLots.all { !it.taken }) \"Parking lot is empty.\\n\"\n        else\
    \ {\n            \n            var res = \"\"\n            for ((index, parkLot)\
    \ in parkingLots.withIndex()) {\n                if (parkLot.taken) {\n      \
    \              res += \"${index+1} $parkLot\\n\"\n                }\n        \
    \    }\n            res\n        }\n    }\n}\n\nfun main() {\n    val msgNotCreated\
    \ = \"Sorry, a parking lot has not been created.\"\n    var parkingLot: ParkingLot?\
    \ = null//ParkingLot(20)\n    val scanner = Scanner(System.`in`)\n\n    var input\
    \ = scanner.nextLine()!!\n    var tokens = input.split(\" \")\n\n    var keepOn\
    \ = tokens[0] != \"exit\"\n    while(keepOn) {\n        when ( tokens[0] ) {\n\
    \            \"park\" -> {\n                val res = parkingLot?.park(tokens[1],\
    \ tokens[2]) ?: msgNotCreated\n                println(res)\n            }\n \
    \           \"leave\" -> {\n                val res = parkingLot?.leave(tokens[1].toInt())\
    \ ?: msgNotCreated\n                println(res)\n            }\n            \"\
    create\" -> {\n                parkingLot = ParkingLot(tokens[1].toInt())\n  \
    \              println(\"Created a parking lot with ${tokens[1]} spots.\")\n \
    \           }\n\n            \"status\" -> {\n                val res = parkingLot?.getStatus()\
    \ ?: msgNotCreated\n                print(res)\n            }\n        }\n   \
    \     input = scanner.nextLine()!!\n        tokens = input.split(\" \")\n    \
    \    keepOn = tokens[0] != \"exit\"\n    }\n\n}\n"
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output." + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }


    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my.toLowerCase() != his.toLowerCase()) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task5Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            spot_by_color yellow
                            create 4
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 White
                            park Rs-P-N-21 Red
                            park Rs-P-N-22 Red
                            reg_by_color GREEN
                            reg_by_color WHITE
                            spot_by_color GREEN
                            spot_by_color red
                            spot_by_reg ABC
                            spot_by_reg KA-01-HH-3672
                            spot_by_reg Rs-P-N-21
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 4 spots.
                            White car parked in spot 1.
                            White car parked in spot 2.
                            Red car parked in spot 3.
                            Red car parked in spot 4.
                            No cars with color GREEN were found.
                            KA-01-HH-9999, KA-01-HH-3672
                            No cars with color GREEN were found.
                            3, 4
                            No cars with registration number ABC were found.
                            2
                            3
                """.trimAllIndents(),
                        hint = "See example 1."
                ),
                outputCase(
                        """
                            spot_by_color yellow
                            reg_by_color yellow
                            spot_by_reg yellow
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check commands until the parking is created."
                ),
                outputCase(
                        """
                            create 5
                            park A AA
                            park B BB
                            park C BB
                            park D AA
                            park E AA
                            leave 4
                            reg_by_color aa
                            reg_by_color bb
                            reg_by_color zz
                            spot_by_color aa
                            spot_by_color bb
                            spot_by_color zz
                            spot_by_reg A
                            spot_by_reg B
                            spot_by_reg Z
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 5 spots.
                            AA car parked in spot 1.
                            BB car parked in spot 2.
                            BB car parked in spot 3.
                            AA car parked in spot 4.
                            AA car parked in spot 5.
                            Spot 4 is free.
                            A, E
                            B, C
                            No cars with color zz were found.
                            1, 5
                            2, 3
                            No cars with color zz were found.
                            1
                            2
                            No cars with registration number Z were found.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check the case, when the parking is not full."
                )

        )

        override fun check(reply: String, clue: OutputClue): CheckResult {
            return clue.compareLines(reply)
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/75/stages/420/implement#comment
status: Unchecked
record: -1
